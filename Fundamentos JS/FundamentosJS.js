// ## 4.2 Sintaxe BÃ¡sica e VariÃ¡veis

// A sintaxe bÃ¡sica do JavaScript Ã© similar a outras linguagens de programaÃ§Ã£o, utilizando variÃ¡veis, operadores e estruturas de controle para executar lÃ³gica de programaÃ§Ã£o.

// ### 4.2.1 DeclaraÃ§Ã£o de VariÃ¡veis ðŸ“¦

// Em JavaScript, vocÃª pode declarar variÃ¡veis usando as palavras-chave `var`, `let` e `const`.

// - **`var`**: Declara uma variÃ¡vel com escopo de funÃ§Ã£o. Ex: `var nome = "JoÃ£o";`
// - **`let`**: Declara uma variÃ¡vel com escopo de bloco. Ex: `let idade = 25;`
// - **`const`**: Declara uma constante, que nÃ£o pode ser reatribuÃ­da. Ex: `const PI = 3.14;`

// ### 4.2.2 Tipos de Dados ðŸ“Š

// JavaScript possui vÃ¡rios tipos de dados primitivos:

// - **String**: Texto. Ex: `let nome = "JoÃ£o";`
// - **Number**: NÃºmeros. Ex: `let idade = 25;`
// - **Boolean**: Verdadeiro ou falso. Ex: `let estaLogado = true;`
// - **Null**: Representa a ausÃªncia intencional de um valor. Ex: `let vazio = null;`
// - **Undefined**: VariÃ¡veis que foram declaradas, mas nÃ£o atribuÃ­das. Ex: `let indefinido;`
// - **Object**: ColeÃ§Ãµes de pares chave-valor. Ex: `let pessoa = { nome: "JoÃ£o", idade: 25 };`

// 4.3 Operadores e Estruturas de Controle
// JavaScript usa operadores para realizar operaÃ§Ãµes em variÃ¡veis e valores, e estruturas de controle para tomar decisÃµes com base em condiÃ§Ãµes.
// 4.3.1 Operadores AritmÃ©ticos e de ComparaÃ§Ã£o âž•âž–â€‹
// AritmÃ©ticos: +, , , /, % (mÃ³dulo)
// let soma = 5 + 3;  // 8
// let diferenca = 5 - 3;  // 2
// â€‹
// ComparaÃ§Ã£o: ==, === (igualdade estrita), !=, !== (desigualdade estrita), >, <, >=, <=
// let igual = 5 == "5";  // true
// let igualEstrito = 5 === "5";  // false

// 4.3.2 Estruturas de Controle ðŸ”„â€‹
// Condicionais: if, else if, else
// let idade = 18;
// if (idade < 18) {
//     console.log("Menor de idade");
// } else {
//     console.log("Maior de idade");
// }

// â€‹
// Loops: for, while, do...while
// for (let i = 0; i < 5; i++) {
//     console.log(i);
// }
